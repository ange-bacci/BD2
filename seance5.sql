-- Q0

CREATE TABLE MATIERE (
    CODE VARCHAR2(7),
    LIBELLE VARCHAR2(30),
    CONSTRAINT PK_CODE PRIMARY KEY (CODE)
);

DECLARE
    CURSOR LEAVES IS
        SELECT CODE, LIBELLE FROM MODULE
        WHERE CODE NOT IN (
            SELECT DISTINCT CODEPERE FROM MODULE
            WHERE CODEPERE IS NOT NULL
        );
BEGIN
    FOR LEAF_E IN LEAVES LOOP
        INSERT INTO MATIERE (CODE, LIBELLE) VALUES (LEAF_E.CODE, LEAF_E.LIBELLE);
    END LOOP;
END;

BEGIN
    INSERT INTO MATIERE SELECT CODE, LIBELLE FROM MODULE
    WHERE CODE NOT IN (
        SELECT DISTINCT CODEPERE FROM MODULE
        WHERE CODEPERE IS NOT NULL
    );
END;

-- Q1

SELECT AGE(SYSDATE-800) FROM DUAL;

-- Q2

DECLARE
    CODEMAT VARCHAR2(7) := 'BD';
BEGIN
    IF ISMAT(CODEMAT) THEN
        DBMS_OUTPUT.PUT_LINE('C''est une matiere');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Pas une matiere');
    END IF;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(VILLEDE(9001)); -- No etud
    DBMS_OUTPUT.PUT_LINE(VILLEDE(2101)); -- No ville
    DBMS_OUTPUT.PUT_LINE(VILLEDE(2102)); -- Aix
END;

-- Q4

DECLARE
    CURSOR LESCODES IS
        SELECT DISTINCT CODE FROM MATIERE;
        
    FUNCTION HIERARCHIE(CODEMAT IN VARCHAR2) RETURN VARCHAR2
    AS
        CHAINE_MODULE VARCHAR2(200);
        CURSOR LESMODULES IS
            SELECT LIBELLE FROM MODULE
            WHERE CODEPERE IS NOT NULL
            AND CODE <> CODEMAT
            CONNECT BY CODE = PRIOR CODEPERE
            START WITH CODE = CODEMAT
            ORDER BY LEVEL DESC;
    BEGIN
        FOR MODULE IN LESMODULES LOOP
            CHAINE_MODULE := CHAINE_MODULE || '/' || MODULE.LIBELLE;
        END LOOP;
        RETURN CHAINE_MODULE;
    END;
BEGIN
    FOR UNCODE IN LESCODES LOOP
        DBMS_OUTPUT.PUT_LINE(HIERARCHIE(UNCODE.CODE));
    END LOOP;
END;

-- Q5

DECLARE
    CURSOR COLS (TNAME VARCHAR2) IS
        SELECT COLUMN_NAME FROM USER_TAB_COLUMNS
        WHERE TABLE_NAME = TNAME;
        
    CURSOR UTABLES IS
        SELECT TABLE_NAME FROM USER_TABLES;
        
    TABLE_DESC VARCHAR2(1000);
BEGIN
    FOR UTABLE IN UTABLES LOOP
        TABLE_DESC := UTABLE.TABLE_NAME || '(';
        
        FOR COLN IN COLS(UTABLE.TABLE_NAME) LOOP
            TABLE_DESC := TABLE_DESC || COLN.COLUMN_NAME || ', ';
        END LOOP;
    
        TABLE_DESC := SUBSTR(TABLE_DESC, 1, LENGTH(TABLE_DESC) - 2);
        TABLE_DESC := TABLE_DESC || ')';
        
        DBMS_OUTPUT.PUT_LINE(TABLE_DESC);
    END LOOP;
END;